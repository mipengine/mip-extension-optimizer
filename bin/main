#!/usr/bin/env node

'use strict';


var minimist = require('minimist');
var path = require('path');
var util = require('../lib/util');

var args = args || minimist(process.argv.slice(2));
var extensionsRoot = args._[0];

// extensionsRoot process, exit when unset
if (!extensionsRoot) {
    console.log('CLI Usage:');
    console.log('mip-extension-optimise <extensions-path> [-o output-path] [extension, extension ...]');
    console.log();
    console.log('Example:');
    console.log('mip-extension-optimise ./mip-extensions -o ./mip-extensions-dist');
    console.log('mip-extension-optimise ./mip-extensions -o ./mip-extensions-dist mip-fixed mip-ad');
    process.exit(0);
}
extensionsRoot = path.resolve(process.cwd(), extensionsRoot);


// traverse extensionsRoot, and do building
// TODO: trace version use git, and check which version is built, which is not.
var reporter = require('../lib/cli-reporter');
var outputDir = args.o || args.output;
if (!outputDir) {
    outputDir = path.resolve(extensionsRoot, 'dist');
}
else {
    outputDir = path.resolve(process.cwd(), outputDir);
}

var buildExtensions = args._.slice(1);
var buildExtensionsFlag = {};
buildExtensions.forEach(function (name) {
    buildExtensionsFlag[name] = true;
});


require('../lib/load')(extensionsRoot)
    .then(
        function (extensions) {
            var promise = Promise.resolve();

            extensions.forEach(function (extension) {
                var name = extension.info.name;
                if (buildExtensions.length > 0 && !buildExtensionsFlag[name]) {
                    return;
                }


                promise = promise.then(function () {
                    var version = extension.info.version;
                    reporter.info(name + '@' + extension.info.version);
                    reporter.info('=========================');

                    var buildPromise;
                    if (util.isDirectory(path.resolve(outputDir, name, version))) {
                        reporter.warn('Exists! You dont need to build once more.');
                        buildPromise = Promise.resolve();
                    }
                    else {
                        buildPromise = extension.build(outputDir, reporter);
                    }

                    return buildPromise.then(function () {
                        reporter.info('\n');
                    });
                });

            });

            return promise;
        }
    )
    .then(function () {
        reporter.success('All Done!')
    });


